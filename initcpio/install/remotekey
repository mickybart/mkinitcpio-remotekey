#!/bin/bash

# Copyright 2022 mickybart

# This file is part of mkinitcpio-remotekey.

# mkinitcpio-remotekey is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# mkinitcpio-remotekey is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with mkinitcpio-remotekey.  If not, see <https://www.gnu.org/licenses/>.

build() {
    id_key="/etc/dropbear/id_remotekey"
    config_file="/etc/dropbear/remotekey"

    source $config_file

    # Are we even needed?
    if [ ! -r "${id_key}" -o ! -s "${id_key}" ]; then
        echo "There is no private key in ${id_key} existent; exit"
        return 0
    fi

    add_binary "dbclient"
    add_binary "sftp"

    add_runscript

    add_dir "/root/.ssh" 700
    ssh-keyscan ${KEY_IP} >> "${BUILDROOT}"/root/.ssh/known_hosts
    chmod 600 "${BUILDROOT}"/root/.ssh/known_hosts
    cat "${id_key}" > "${BUILDROOT}"/root/.ssh/id_dropbear
    chmod 600 "${BUILDROOT}"/root/.ssh/id_dropbear

    add_dir "/etc/dropbear"
    cp "${config_file}" "${BUILDROOT}"/etc/dropbear/
}

help() {
    cat <<HELPEOF
This hook can copy from a sftp server a keyfile to unlock an encrypted
root device. It DOES NOT perform any network interface configuration.

Use this hook in combination with any early userspace networking hook, such as
mkinitcpio-netconf or mkinitcpio-ppp. Place this hook AFTER any network
configuration hook and BEFORE the encrypt or encryptssh hook.
HELPEOF
}
